@{
    ViewData["Title"] = "Notes";
}
<script>
    

    function NoteReference(data)
    {
        self.id = data.id;
        self.text = ko.computed(function() {return data.text();});
    }

    function NoteModel(data)
    {
        var self = this;
        self.id = data.id;
        self.text = ko.observable(data.text);
        // self.text
        //     .subscribe(function() {
        //         $.ajax({
        //             type: "POST",
        //             url: "Home/UpdateNote",
        //             data: {
        //                 note: toJsWithoutFunctions(self)
        //             },
        //             success: function(response) {
        //             },
        //             dataType: "json"
        //         });
        //     });
        
        self.ConnectedWith = ko.observableArray(
        );

        self.DataConnectedWith = data.connectedWith;

        self.restoreConnections = function(lookupDictionary)
        {
            var restored = $.map(self.DataConnectedWith, function(data) {
                var toAdd = lookupDictionary[data.id];
                return toAdd;
            });
            ko.utils.arrayPushAll(self.ConnectedWith, restored);
        };

        self.RawViewIsEnabled = ko.observable(false);
        self.EnableRawView = function(){
            self.RawViewIsEnabled(true);
        };
        self.DisableRawView = function() {
            self.RawViewIsEnabled(false);
        };
    };

    function toJsWithoutFunctions(data) {
        var model = ko.toJS(data);
            for(var x in model) {
                if(typeof(model[x]) === "function") {
                    model[x] = null;
                }
            }
        return model;
    };

    function ConnectedNotesViewModel()
    {
        var self = this;
        
        self.Notes = ko.observableArray([]);
        

        self.RetrieveDataFromServer = function() {
            $.ajax({
                type: "POST",
                url: "Home/RetrieveAllNotes",
                data: {
                    
                },
                success: function(data) {
                    var dictionary = {};
                    var toAdd = ko.utils.arrayMap(data, function(elem) {
                        dictionary[elem.id] = new NoteModel(elem);
                        return dictionary[elem.id];
                    });
                    ko.utils.arrayPushAll(self.Notes, toAdd);
                    $.each(self.Notes(), function(index, value) {
                        value.restoreConnections(dictionary);
                        

                    });

                },
                dataType: "json"
            });

        };

        self.connectFrom = ko.observable(null);

        self.CreateNote = function() {
            $.ajax({
                type: "POST",
                url: "Home/CreateNote",
                success: function(data) {
                    var toAdd = new NoteModel(data);
                    self.Notes.push(toAdd);

                },
                dataType: "json"
            });
        };

        self.SelectFrom = function(data) {
            self.connectFrom(data);
        };

        self.ConnectNotes = function(data) {
            $.ajax({
                type: "POST",
                url: "Home/ConnectNotes",
                data: {
                    from: toJsWithoutFunctions(self.connectFrom),
                    to: toJsWithoutFunctions(data)
                },
                success: function(response) {
                    self.connectFrom.ConnectedWith.push(new NoteReference(data));
                    self.connectFrom(null);

                },
                dataType: "json"
            });
        };

        

    };

    $(document).ready(function()
    {
        var viewModel = new ConnectedNotesViewModel();
        ko.applyBindings(viewModel);
        viewModel.RetrieveDataFromServer();
    });
</script>
<script type="text/html" id="note-template">
    <li>
        <span data-bind="if: $root.connectFrom() != null">
            <button data-bind="click: $root.ConnectNotes" >With</button>
        </span>
    <span>
        <span data-bind="text: '#'"></span>
        <span data-bind="text: id"></span>
        <span data-bind="text: ','"></span>
    </span>
    <span>
        <span data-bind="ifnot: RawViewIsEnabled">
            <span data-bind="text: text"></span>
            <button data-bind="click: EnableRawView" >Edit</button>
        </span>
        <span data-bind="if: RawViewIsEnabled">
            <input data-bind="value: text, valueUpdate: 'keypress keyup'"></input>
            <ul data-bind="foreach: ConnectedWith ">
                <li >
                    <button data-bind="click: $parent.Disconnect">Disconnect</button>
                    <span data-bind="text: '#'"></span>
                    <span data-bind="text: id"></span>
                    <span data-bind="text: text"></input> 
                </li>
            </ul>
            <br>
            <button data-bind="click: $root.SelectFrom" >Connect</button>
        </span>
        
        <span data-bind="if: RawViewIsEnabled">
            <button data-bind="click: DisableRawView" >Collapse</button>
        </span>
    </span>
    </li>
</script>
<div>
        <ul data-bind="template: {name: 'note-template', foreach: Notes} ">
        </ul>
        <br>

        <button data-bind="click: $root.CreateNote">Create note</button>
    
</div>