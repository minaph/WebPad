@{
}
<script>
    function NoteModel(data, allConnections)
    {
        var self = this;
        self.id = data.id;
        self.text = ko.observable(data.text);
        self.text
            .subscribe(function() {
                var temp = toJsWithoutFunctions(self);
                $.ajax({
                    type: "POST",
                    url: "Home/UpdateNote",
                    data: {
                        note: temp
                    },
                    success: function(response) {
                    },
                    dataType: "json"
                });
                if(self.textChangesOccuredHandler && typeof(self.textChangesOccuredHandler) == "function") {
                    self.textChangesOccuredHandler(toJsWithoutFunctions(self));
                }
            });

        self.allConnections = allConnections;

        self.MyComputedConnections = ko.pureComputed(function() {
                return ko.utils.arrayFilter(self.allConnections(), function(conn) {
                    return conn.Source.id == self.id;
                }); 
              
        });

        self.textChangesOccuredHandler;
        self.subscribeToTextChanges = function(callback) {
            self.textChangesOccuredHandler = callback;
        };
    };

    function ConnectedNotesModel(id, a, b, label)
    {
        var self = this;
        self.id = id;
        self.Source = a;
        self.Destination = b;
        self.label = ko.observable(label);
        self.labelUpdateCallback;
        self.label
            .subscribe(function() {
                var temp = toJsWithoutFunctions(self);
                $.ajax({
                    type: "POST",
                    url: "Home/UpdateConnection",
                    data: {
                        connection: temp
                    },
                    success: function(response) {
                    },
                    dataType: "json"
                });
                if(self.labelUpdateCallback && typeof(self.labelUpdateCallback) == "function") {
                    self.labelUpdateCallback(temp);
                }
            });
        self.subscribeToLabelChanges = function(callback) {
            self.labelUpdateCallback = callback;
        };


    };

    function toJsWithoutFunctions(data) {
        var mapping = {
            'ignore': ["allConnections", "RawViewIsEnabled", "DataConnectedWith", "MyComputedConnections"]
        }
        var model = ko.mapping.toJS(data, mapping);
            for(var x in model) {
                if(typeof(model[x]) === "function") {
                    model[x] = null;
                }
            }
        return model;
    };

    var storageForCallBacks = {
        note: {
            added: '',
            updated: '',
            removed: ''
        },
        connection: {
            added: '',
            updated: '',
            removed: ''
        }
    };

    function ConnectedNotesViewModel()
    {
        var self = this;
        
        self.Notes = ko.observableArray([]);
        self.Connections = ko.observableArray([]);

        self.Notes.subscribe(function(changes) {
            if(changes && changes.length > 0)
            {
                $.each(changes, function(index, value) {
                    if(value.status == "added") {
                        if(typeof(storageForCallBacks.note.added) == "function") {
                            storageForCallBacks.note.added(toJsWithoutFunctions(value.value));
                        }
                    }
                    if(value.status == "deleted") {
                        if(typeof(storageForCallBacks.note.removed) == "function") {
                            storageForCallBacks.note.removed(toJsWithoutFunctions(value.value));
                        }
                    }
                });
            }
        }, null, "arrayChange");

        self.Connections.subscribe(function(changes) {
            if(changes && changes.length > 0)
            {
                $.each(changes, function(index, value) {
                    if(value.status == "added") {
                        if(typeof(storageForCallBacks.connection.added) == "function") {
                            storageForCallBacks.connection.added(toJsWithoutFunctions(value.value));
                        }
                    }
                    if(value.status == "deleted") {
                        if(typeof(storageForCallBacks.connection.removed) == "function") {
                            storageForCallBacks.connection.removed(toJsWithoutFunctions(value.value));
                        }
                    }
                });
            }
        }, null, "arrayChange");
        

        self.RetrieveDataFromServer = function() {
            $.ajax({
                type: "POST",
                url: "Home/RetrieveAllNotes",
                data: {
                },
                success: function(data) {
                    var dictionary = {};
                    var toAdd = ko.utils.arrayMap(data.notes, function(elem) {
                         var noteToAdd = new NoteModel(elem, self.Connections);
                         noteToAdd.subscribeToTextChanges(storageForCallBacks.note.updated);
                         dictionary[elem.id] = noteToAdd;
                        return noteToAdd;
                    });
                    ko.utils.arrayPushAll(self.Notes, toAdd);

                    var connectionsToAdd = ko.utils.arrayMap(data.connections, function(elem) {
                        var Source = dictionary[elem.source.id];
                        var Destination = dictionary[elem.destination.id];
                        var connectionToAdd = new ConnectedNotesModel(elem.id, Source, Destination, elem.label);
                        connectionToAdd.subscribeToLabelChanges(storageForCallBacks.connection.updated);
                        return connectionToAdd;
                    });

                    ko.utils.arrayPushAll(self.Connections, connectionsToAdd);


                },
                dataType: "json"
            });

        };

        self.connectFrom = ko.observable(null);

        self.CreateNote = function() {
            $.ajax({
                type: "POST",
                url: "Home/CreateNote",
                success: function(data) {
                    var toAdd = new NoteModel(data, self.Connections);
                    toAdd.subscribeToTextChanges(storageForCallBacks.note.updated);
                    self.Notes.push(toAdd);

                },
                dataType: "json"
            });
        };

        self.SelectFrom = function(data) {
            self.connectFrom(data);
        };

        self.CancelSelectFrom = function() {
            self.connectFrom(null);
        };

        self.ConnectNotes = function(data) {
            $.ajax({
                type: "POST",
                url: "Home/ConnectNotes",
                data: {
                    from: toJsWithoutFunctions(self.connectFrom),
                    to: toJsWithoutFunctions(data)
                },
                success: function(response) {
                    var connectionToAdd = new ConnectedNotesModel(response.id, response.source, response.destination, response.label);
                    connectionToAdd.subscribeToLabelChanges(storageForCallBacks.connection.updated);
                    self.Connections.push(connectionToAdd);
                    self.connectFrom(null);

                },
                dataType: "json"
            });
        };

        self.RemoveNote = function( note) {
            $.ajax({
                type: "POST",
                url: "Home/RemoveNote",
                data: {
                    note: toJsWithoutFunctions(note)
                },
                success: function(response) {
                    self.Notes.remove(note);
                },
                dataType: "json"
            });
        };

        self.RemoveConnection = function(connection) {

            $.ajax({
                type: "POST",
                url: "Home/RemoveConnection",
                data: {
                    id: connection.id
                },
                success: function(response) {
                    self.Connections.remove(connection);
                },
                dataType: "json"
            });
            
        };

        

    };

    $(document).ready(function()
    {
        
        // create an array with nodes
        var nodes = new vis.DataSet([
            // {id: 1, label: 'Node 1'},
            // {id: 2, label: 'Node 2'},
        ]);

        // create an array with edges
        var edges = new vis.DataSet([
            // {from: 1, to: 2},
        ]);

        // create a network
        var container = document.getElementById('mygraph');
        var data = {
            nodes: nodes,
            edges: edges
        };
        var options = {};
        var network = new vis.Network(container, data, options);

        storageForCallBacks.note.added = function (added) {
            nodes.add( {id: added.id, label: added.text, shape: 'box' });
        };

        storageForCallBacks.note.updated = function(changed) {
            nodes.update({id: changed.id, label: changed.text}); 
        };

        storageForCallBacks.note.removed = function(node) {
            nodes.remove(node.id);
        };

        storageForCallBacks.connection.added = function(connectionAdded) {
            edges.add( {
                id: connectionAdded.id,
                from: connectionAdded.Source.id,
                to: connectionAdded.Destination.id,
                arrows: 'to',
                label: connectionAdded.label,
                font: { align: 'top' } 
            });
        };

        storageForCallBacks.connection.updated = function(connectionUpdated) {
            edges.update({
                id: connectionUpdated.id,
                label: connectionUpdated.label
            });
        };

        storageForCallBacks.connection.removed = function(connection) {
            edges.remove(connection.id);
        };
        
        var viewModel = new ConnectedNotesViewModel();
        ko.applyBindings(viewModel);
        viewModel.RetrieveDataFromServer();



        
    });
</script>
<script type="text/html" id="note-template">
    <li>
        <span data-bind="if: $root.connectFrom() != null && $root.connectFrom().id != id">
            <button data-bind="click: $root.ConnectNotes" >To</button>
        </span>
        <span data-bind="if: $root.connectFrom() != null && $root.connectFrom().id == id">
            <span>From</span>
        </span>
        <span>
            <input data-bind="value: text, valueUpdate: 'keypress keyup'"></input> 
            <button data-bind="click: $root.RemoveNote">Remove</button>
            <ul>
                <!-- ko foreach: MyComputedConnections -->
                    <li>
                        <input data-bind="value: label, valueUpdate: 'keypress keyup'" > </input>
                        <span> => </span>
                        <span data-bind="text: Destination.text"></span>
                        <button data-bind="click: $root.RemoveConnection">Remove</button>
                    </li>
                <!-- /ko -->
                <li>
                    <span data-bind="if: $root.connectFrom() != null && $root.connectFrom().id == id">
                        <button data-bind="click: $root.CancelSelectFrom">Cancel</button>    
                    </span>
                    <span data-bind="if: $root.connectFrom() == null">
                        <button data-bind="click: $root.SelectFrom" >Connect</button>
                    </span>
                    <span data-bind="if: $root.connectFrom() != null && $root.connectFrom().id != id">
                        <button data-bind="click: $root.SelectFrom" >Change From</button>
                    </span>
                </li>
            </ul>
        </span>
    </li>
</script>
<div style="position: absolute; top:10px; left: 10px; z-index: 10;">
WebPad <button data-bind="click: $root.CreateNote">Create</button>
</div>
<div id="mygraph" style="height: 100vh; width: 100%; z-index: 9;">


    <!-- <div class="row">
         <div class="col-md-3">
            <div style="overflow-y: scroll; height: 550px;">
                <ul data-bind="template: {name: 'note-template', foreach: Notes} ">
                </ul>
            </div>
            <button data-bind="click: $root.CreateNote">Create note</button>
        </div>
        <div class="col-md-12">
            

        </div>
            
    </div> -->
</div>
