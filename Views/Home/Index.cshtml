@{
    ViewData["Title"] = "Notes";
}
<script>
    
    

    function NoteModel(data)
    {
        var self = this;
        self.id = ko.observable(data.id);
        self.text = ko.observable(data.text);
        
        self.ConnectedWith = ko.observableArray(
            ko.utils.arrayMap(data.connectedWith, function(elem) {
                    return new NoteModel(elem);
                }
            )
        );

        self.RawViewIsEnabled = ko.observable(false);
        self.EnableRawView = function(){
            self.RawViewIsEnabled(true);
        };
        self.DisableRawView = function() {
            self.RawViewIsEnabled(false);
        };
    };

    function toJsWithoutFunctions(data) {
        var model = ko.toJS(data);
            for(var x in model) {
                if(typeof(model[x]) === "function") {
                    model[x] = null;
                }
            }
        return model;
    };

    function ConnectedNotesViewModel(data)
    {
        var self = this;
        if(data != null){
            self.skills = ko.observableArray(
                ko.utils.arrayMap(data, function(elem) {
                    return new NoteModel(elem);
                }
            ));
        }
        else
        {
            self.skills = ko.observableArray([]);
        }

        self.RetrieveDataFromServer = function() {
            $.ajax({
                type: "POST",
                url: "Home/RetrieveAllNotes",
                data: {
                    
                },
                success: function(data) {
                    var toAdd = ko.utils.arrayMap(data, function(elem) {
                        return new NoteModel(elem);
                    });
                    ko.utils.arrayPushAll(self.skills, toAdd);

                },
                dataType: "json"
            });

        };

        self.MakeNewEmptyNode = function() {
            $.ajax({
                type: "POST",
                url: "Home/MakeNewNode",
                success: function(data) {
                    var toAdd = new NodeModel(data);
                    self.skills.push(toAdd);

                },
                dataType: "json"
            });
        };

        

    };

    $(document).ready(function()
    {
        var viewModel = new ConnectedNotesViewModel();
        ko.applyBindings(viewModel);
        viewModel.RetrieveDataFromServer();
    });
</script>
<script type="text/html" id="node-template">
    <li>
    <span>
        <span data-bind="text: '#'"></span>
        <span data-bind="text: id"></span>
        <span data-bind="text: ','"></span>
        <span data-bind="text: text"></span>
    </span>
    <span>
        <span data-bind="ifnot: RawViewIsEnabled">
            <button data-bind="click: EnableRawView" >View</button>
        </span>
        <span data-bind="if: RawViewIsEnabled">
            <ul data-bind="foreach: tags">
                <li >
                    <span data-bind="ifnot: tag().startsWith('system-reference:')">
                        <button data-bind="click: $parent.RemoveTag">Remove</button>
                    </span>
                    <span data-bind="text: '#'"></span>
                    <span data-bind="text: id"></span>
                    <span data-bind="text: '{'"></span>
                    <span data-bind="text: tag"></span>
                    <span data-bind="text: '} -> {'"></span>
                    <span data-bind="if: tag().startsWith('system-reference:')">
                        <span data-bind="text: value"></span>
                    </span>
                    <span data-bind="ifnot: tag().startsWith('system-reference:')">
                        <input data-bind="value: value"></input>
                    </span>
                    
                    <span data-bind="text: '}'"></span>
                </li>
            </ul>
            <br>
        </span>
        
        <span data-bind="if: RawViewIsEnabled">
            <button data-bind="click: DisableRawView" >Collapse</button>
        </span>
    </span>
    </li>
</script>
<div>
        <ul data-bind="template: {name: 'node-template', foreach: skills} ">
        </ul>
    
</div>